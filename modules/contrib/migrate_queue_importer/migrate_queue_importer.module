<?php

/**
 * @file
 * Contains migrate_queue_importer.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Url;
use Drupal\migrate\Plugin\MigrationInterface;

/**
 * Implements hook_help().
 */
function migrate_queue_importer_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.migrate_queue_importer':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Provides the ability to create cron
      migrations(configuration entities) with a reference towards migration
      entities in order to import them during CRON runs. You can also define
      additional options such as update and ignore dependencies for each of the
      referenced migrations. Navigate to <a href=":url">Cron migration</a> to use the UI.',
          [':url' => Url::fromRoute('entity.cron_migration.collection')->toString()]) . '</p>';

      return $output;
  }
}

/**
 * Implements hook_cron().
 */
function migrate_queue_importer_cron() {
  // Some migrations import process might cause timeout, thus avoid executing
  // this from the CRON form.
  $parameters = Drupal::request()->request->all();

  // Check if ParameterBag has form_id set and is CRON form.
  if (isset($parameters['form_id']) && $parameters['form_id'] === 'system_cron_settings') {
    return;
  }

  // Load all cron_migration entities.
  /** @var \Drupal\migrate_queue_importer\Entity\CronMigration $entities **/
  $entities = \Drupal::entityTypeManager()
    ->getStorage('cron_migration')
    ->loadByProperties([
      'status' => TRUE,
    ]);

  if (empty($entities)) {
    return;
  }

  $queue = \Drupal::queue('migrations_importer');
  $queue_depth = $queue->numberOfItems();

  /** @var \Drupal\migrate\Plugin\MigrationPluginManagerInterface $migrationPluginManager **/
  $migrationPluginManager = \Drupal::service('plugin.manager.migration');
  $logger = \Drupal::logger('migrate_queue_importer');

  // Flag used to log if nothing needs to be imported.
  $import = FALSE;

  foreach ($entities as $id => $entity) {
    if (empty($entity->migration)) {
      continue;
    }

    /** @var \Drupal\migrate\Plugin\MigrationInterface $migration **/
    if ($migration = $migrationPluginManager->createInstance($entity->migration)) {
      /** @var \Drupal\Core\KeyValueStore\KeyValueFactory $keyValue **/
      $keyValue = Drupal::service('keyvalue');
      $migrate_last_imported_store = $keyValue->get('migrate_last_imported');

      // Current time.
      $time = \Drupal::time()->getCurrentTime();
      // Avoid overpopulating the queue.
      if ($queue_depth <= count($entities)) {
        // Get config entity interval in seconds.
        $interval = $entity->time ? $entity->time * 1000 : 0;

        // Get last imported time of the migration.
        $last_imported = $migrate_last_imported_store->get(
          $migration->id(),
          0
        );

        // Check if enough time passed to queue up the migration.
        if ((int) (($last_imported + $interval) / 1000) < $time) {
          $import = TRUE;
          $settings = [
            'migration' => $migration,
            'update' => $entity->update,
            'sync' => $entity->sync,
            'ignore' => $entity->ignore_dependencies,
          ];

          // Check dependencies first, queue them up.
          if (!$entity->ignore_dependencies) {
            _migrate_queue_importer_check_dependencies($migration, $entity->update, $entity->sync, [
              'migrationManager' => $migrationPluginManager,
              'queue' => $queue,
              'logger' => $logger,
            ]);
          }

          // We pass import options only for the selected migration.
          $success = $queue->createItem($settings);
          if ($success) {
            $logger->notice('%label has been scheduled for import',
              [
                '%label' => $migration->label(),
              ]
            );
          }
        }
      }
    }

    if (!$import) {
      $logger->notice('No migrations to import.');
    }
  }
}

/**
 * Helper function to check if migration dependencies are met.
 *
 * @param Drupal\migrate\Plugin\MigrationInterface $migration
 *   Migration used to check if dependent migrations are fully processed.
 * @param bool $update
 *   Migration update flag.
 * @param bool $sync
 *   Migration sync flag.
 * @param array $services
 *   Drupal services passed on through the array_walk:
 *   - migrationManager: MigrationPluginManagerInterface service.
 *   - QueueInterface: queue object for migrate_queue_importer.
 *   - LoggerInterface: logger service.
 */
function _migrate_queue_importer_check_dependencies(MigrationInterface $migration, bool $update, bool $sync, array $services) {
  $migrationPluginManager = $services['migrationManager'];
  $queue = $services['queue'];
  $logger = $services['logger'];

  if ($required_Ids = $migration->getMigrationDependencies()['required']) {
    $required_migrations = $migrationPluginManager->createInstances($required_Ids);

    /** @var \Drupal\migrate\Plugin\MigrationInterface $required_migration **/
    foreach ($required_migrations as $required_migration) {
      _migrate_queue_importer_check_dependencies($required_migration, $update, $sync, $services);

      if (!$required_migration->allRowsProcessed() || $update || $sync) {
        $success = $queue->createItem([
          'migration' => $required_migration,
          'update' => $update,
          'sync' => $sync,
          'ignore' => FALSE,
        ]);
        if ($success) {
          $logger->notice('%label has been scheduled for import',
            [
              '%label' => $required_migration->label(),
            ]
          );
        }
      }
    }
  }
}
